version: 2.1

jobs:
  build:
    docker:
      - image: cimg/node:current
    steps:
      - checkout

      # Restore previous node package cache if there is one
      - restore_cache:
          key: node-{{ checksum "package-lock.json" }}

      # Install or update packages
      - run: npm ci

      # Save cache
      - save_cache:
          key: node-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm

      # Store project files for the next job
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  test-setup:
    docker:
      - image: cimg/node:current
    steps:
      # Start with the initial build
      - attach_workspace:
          at: ~/

      # Optionally add a couple of fields such as the git hash and link to the build
      - run:
          name: Set up resources
          command: |
            npx testmo automation:resources:add-field --name git --type string \
              --value ${CIRCLE_SHA1:0:7} --resources resources.json
            npx testmo automation:resources:add-link --name build \
              --url $CIRCLE_BUILD_URL --resources resources.json

      # Check if the required variables are available
      - run:
          command: |
            if [[ -z "${TESTMO_URL}" ]]; then
              echo "The TESTMO_URL secret is not defined for this project"
              exit 1
            fi

            if [[ -z "${TESTMO_TOKEN}" ]]; then
              echo "The TESTMO_TOKEN secret is not defined for this project"
              exit 1
            fi

      # Create test run in Testmo and store ID in file
      - run:
          name: Create test run in Testmo
          command: |
            npx testmo automation:run:create \
              --instance "$TESTMO_URL" \
              --project-id 1 \
              --name "Parallel mocha test run" \
              --resources resources.json \
              --source "unit-tests" > testmo-run-id.txt

      # Update workspace to persist run ID file
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  test:
    docker:
      - image: cimg/node:current
    parallelism: 4
    steps:
      # Start with the initial build
      - attach_workspace:
          at: ~/

      # Split & run tests and report results to Testmo
      - run:
          name: Split and run tests
          command: |
            npx testmo automation:run:submit-thread \
              --instance "$TESTMO_URL" \
              --run-id "$(cat testmo-run-id.txt)" \
              --results results/*.xml \
              -- npm run mocha-junit-parallel # Note space after --

      # Store test artifacts and results
      - store_artifacts:
          path: results
          destination: test_results
      - store_test_results:
          path: results

  test-complete:
    docker:
      - image: cimg/node:current
    steps:
      # Start with the initial build
      - attach_workspace:
          at: ~/

      # Mark run as completed
      - run:
          name: Mark run as completed
          command: |
            npx testmo automation:run:complete \
              --instance "$TESTMO_URL" \
              --run-id "$(cat testmo-run-id.txt)"

  deploy:
    docker:
      - image: cimg/node:current
    steps:
      # Start with the initial build
      - attach_workspace:
          at: ~/

      # You would deploy your code here
      - run: echo "Deploying code here"

workflows:
  version: 2
  full:
    jobs:
      - build:
          context:
            - testmo
      - test-setup:
          requires:
            - build
          context:
            - testmo
      - test:
          requires:
            - test-setup
          context:
            - testmo
      - test-complete:
          requires:
            - test
          context:
            - testmo
      - deploy:
          requires:
            - test-complete
          context:
            - testmo
